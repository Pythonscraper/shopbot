import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

# WEBAPP_HOST = "0.0.0.0"
# WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ USOFT'
admin_message = '/admin'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(user_message)

    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.full_name}</b>",reply_markup=markup)




@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):

    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã 

üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –ö–æ–º–∞–Ω–¥–∞ /sos –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.''', )

    await message.answer('–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ -> /menu', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ -> /adminmenu', reply_markup=ReplyKeyboardRemove())


# async def on_startup(dp):
#     logging.basicConfig(level=logging.INFO)
#     db.create_tables()
#
#     await bot.delete_webhook()
#     await bot.set_webhook(config.BOT_TOKEN)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)

